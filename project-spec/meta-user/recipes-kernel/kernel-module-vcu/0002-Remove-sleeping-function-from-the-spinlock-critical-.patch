From b62c51f0399286c74765cb72d85d464aa344a24f Mon Sep 17 00:00:00 2001
From: Kevin Grandemange <kevin.grandemange@allegrodvt.com>
Date: Mon, 15 Oct 2018 10:22:27 +0200
Subject: [PATCH 2/4] Remove sleeping function from the spinlock critical
 section

Allocate the mail structure and its buffer before trying to read the mailbox.
This also removes multiple copies of the mail data between object as this
groups the allocations (3 before, 1 now) together.

The header buffer is now on the stack.

Signed-off-by: Kevin Grandemange <kevin.grandemange@allegrodvt.com>
---
 common/al_group.c         |  5 +++++
 common/al_mail.c          | 30 ++++++++++++++++++++++++------
 common/al_mailbox.c       | 39 ++++++++++++++++++++++++++-------------
 common/mcu_interface.c    | 16 ++++++++++++++--
 include/al_mail_private.h |  3 +++
 include/al_mailbox.h      |  2 +-
 6 files changed, 73 insertions(+), 22 deletions(-)

diff --git a/common/al_group.c b/common/al_group.c
index 2660d44..3f1ce0e 100644
--- a/common/al_group.c
+++ b/common/al_group.c
@@ -217,6 +217,11 @@ void read_mail(struct al5_group *group)
 {
 	struct al5_mail *mail = al5_mcu_recv(group->mcu);
 
+	if (!mail) {
+		dev_err(group->device, "Failed to get mcu mail. Skipping...\n");
+		return;
+	}
+
 	handle_mail(group, mail);
 }
 
diff --git a/common/al_mail.c b/common/al_mail.c
index 66989d6..e562c58 100644
--- a/common/al_mail.c
+++ b/common/al_mail.c
@@ -22,18 +22,36 @@
 #include "al_mail.h"
 #include "al_mail_private.h"
 
-struct al5_mail *al5_mail_create(u32 msg_uid, u32 content_size)
+static size_t get_mail_struct_size(void)
 {
-	/* body should be aligned 32 bits */
 	const size_t mail_size = roundup(sizeof(struct al5_mail), 4);
-	struct al5_mail *mail = kmalloc(mail_size + content_size, GFP_KERNEL);
 
-	if (!mail)
-		return NULL;
+	return mail_size;
+}
+
+/* body should be aligned 32 bits */
+size_t al5_get_mail_alloc_size(u32 content_size)
+{
+	return get_mail_struct_size() + content_size;
+}
+
+void al5_mail_init(struct al5_mail *mail, u32 msg_uid, u32 content_size)
+{
 	mail->body_offset = 0;
 	mail->msg_uid = msg_uid;
 	mail->body_size = content_size;
-	mail->body = (u8 *)mail + mail_size;
+	mail->body = (u8 *)mail + get_mail_struct_size();
+}
+
+struct al5_mail *al5_mail_create(u32 msg_uid, u32 content_size)
+{
+	struct al5_mail *mail =
+		kmalloc(al5_get_mail_alloc_size(content_size), GFP_KERNEL);
+
+	if (!mail)
+		return NULL;
+
+	al5_mail_init(mail, msg_uid, content_size);
 
 	return mail;
 }
diff --git a/common/al_mailbox.c b/common/al_mailbox.c
index 767d041..dc8ac0f 100644
--- a/common/al_mailbox.c
+++ b/common/al_mailbox.c
@@ -20,6 +20,7 @@
 #include <linux/io.h>
 
 #include "al_mailbox.h"
+#include "al_mail_private.h"
 #include "mcu_utils.h"
 
 const int header_size = 4;
@@ -124,17 +125,16 @@ static void write_data(struct mailbox *box, u8 *in_data, size_t size)
 	box->local_tail = tail_value;
 }
 
-static u8 *read_data(struct mailbox *box, size_t size)
+static u8 *read_data(struct mailbox *box, u8 *out_data, size_t size)
 {
-	u8 *out_data = kzalloc(size, GFP_KERNEL);
 	u32 head_value = ioread32(box->head);
 	u8 *data_iterator = out_data;
 
 	if (mailbox_is_wrapping(box->size, head_value, size))
 		read_in_mailbox_until_wrap(box, &size, &head_value,
 					   &data_iterator);
-	memcpy_fromio_32(data_iterator, box->data + head_value, size);
 
+	memcpy_fromio_32(data_iterator, box->data + head_value, size);
 	head_value = ((head_value + size + 3) / 4 * 4) % box->size;
 	iowrite32(head_value, box->head);
 
@@ -167,20 +167,33 @@ int al5_mailbox_write(struct mailbox *box, struct al5_mail *mail)
 }
 EXPORT_SYMBOL_GPL(al5_mailbox_write);
 
-struct al5_mail *al5_mailbox_read(struct mailbox *box)
+bool al5_mailbox_read(struct mailbox *box, struct al5_mail *mail, size_t mail_size)
 {
-	u8 *header = read_data(box, header_size);
-	u16 msg_uid = unserialize_msg_uid(header);
-	u16 body_size = unserialize_body_size(header);
-	struct al5_mail *mail = al5_mail_create(msg_uid, body_size);
+	u8 header[header_size];
+	u16 msg_uid;
+	u16 body_size;
+	size_t real_mail_size;
+
+	read_data(box, header, header_size);
+
+	msg_uid = unserialize_msg_uid(header);
+	body_size = unserialize_body_size(header);
 
-	u8 *body = read_data(box, body_size);
+	real_mail_size = al5_get_mail_alloc_size(body_size);
 
-	al5_mail_write(mail, body, body_size);
+	/* we can't store this mail, it will be dropped */
+	if (mail_size < real_mail_size) {
+		pr_debug(
+			"BUG(%s) mail_size: %ld, real mail_size: %ld, body size: %d, msg uid: %d\n", __func__, mail_size, real_mail_size, body_size,
+			msg_uid);
+		return false;
+	}
 
-	kfree(header);
-	kfree(body);
+	al5_mail_init(mail, msg_uid, body_size);
 
-	return mail;
+	read_data(box, mail->body, body_size);
+	/* for consistency, but noone should want to write after this mail */
+	mail->body_offset += body_size;
+	return true;
 }
 EXPORT_SYMBOL_GPL(al5_mailbox_read);
diff --git a/common/mcu_interface.c b/common/mcu_interface.c
index 5075d2f..5c5d2f4 100644
--- a/common/mcu_interface.c
+++ b/common/mcu_interface.c
@@ -19,6 +19,7 @@
 
 #include "mcu_interface_private.h"
 #include "mcu_utils.h"
+#include "al_mail_private.h"
 
 #include <linux/printk.h>
 
@@ -82,10 +83,21 @@ EXPORT_SYMBOL_GPL(al5_mcu_send);
 
 struct al5_mail *al5_mcu_recv(struct mcu_mailbox_interface *mcu)
 {
-	struct al5_mail *mail;
+	/* this is also the maximum size of the al5_params opaque struct */
+	const size_t mail_size = al5_get_mail_alloc_size(128 * 4);
+	struct al5_mail *mail = kmalloc(mail_size, GFP_KERNEL);
+
+	if (!mail)
+		return NULL;
 
 	spin_lock(&mcu->read_lock);
-	mail = al5_mailbox_read(mcu->mcu_to_cpu);
+	if (!al5_mailbox_read(mcu->mcu_to_cpu, mail, mail_size)) {
+		dev_err(mcu->dev,
+			"BUG: mcu sent a message bigger than the maximum size.");
+		kfree(mail);
+		mail = NULL;
+	}
+
 	spin_unlock(&mcu->read_lock);
 
 	return mail;
diff --git a/include/al_mail_private.h b/include/al_mail_private.h
index 6e27f02..39dbb62 100644
--- a/include/al_mail_private.h
+++ b/include/al_mail_private.h
@@ -25,4 +25,7 @@ struct al5_mail {
 	u8 *body;
 };
 
+size_t al5_get_mail_alloc_size(u32 content_size);
+void al5_mail_init(struct al5_mail *mail, u32 msg_uid, u32 content_size);
+
 #endif
diff --git a/include/al_mailbox.h b/include/al_mailbox.h
index 8b11143..9ecf9e8 100644
--- a/include/al_mailbox.h
+++ b/include/al_mailbox.h
@@ -33,6 +33,6 @@ struct mailbox {
 
 void al5_mailbox_init(struct mailbox *box, void *base, size_t data_size);
 int al5_mailbox_write(struct mailbox *box, struct al5_mail *mail);
-struct al5_mail *al5_mailbox_read(struct mailbox *box);
+bool al5_mailbox_read(struct mailbox *box, struct al5_mail *mail, size_t mail_size);
 
 #endif /* _MCU_MAILBOX_H_ */
-- 
2.7.4

